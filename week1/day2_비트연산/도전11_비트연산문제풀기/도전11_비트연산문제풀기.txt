(1) a가 홀수인지 if문과 비트 연산자를 이용하여 판별하고자 한다. ?자리에 들어갈 비트연산자​는?
if(a ? 1){}
정답 : if(a & 1){}

(2) a가 짝수인지 if문과 비트 연산자를 이용하여 판별하고자 한다. ?자리에 들어갈 비트​연산자​는?​
if(?a ? 1){}
정답 : if(~a & 1){}

(3) a와 2의 k제곱을 곱한 결과(결과는 int 범위를 넘지 않는다.)를 구하고자 한다.​ ?자리에 들어갈 비트​연산자​는?​​
result = a ? k;
정답 : result = a << k;

(4) a를 2의 k제곱으로 나눈 몫 p와 나머지 r 을 구하고자 한다. ?자리에 들어갈 비트​연산자​들은?​​​
p = a ? k, r = a ? ((1 ? k) - 1);
정답 : p = a >> k, r = a & ((1 << k) - 1);

(5) 다음은 a와 b의 값을 서로 바꾸는 코드이다. ?자리에 들어갈 비트​연산자들은​?​​​
a = a ? b, b = a ? b, a = a ? b;
정답 : a = a ^ b, b = a ^ b, a = a ^ b;

(6) a의 k번째(2의 k제곱 ​자리) 비트가 0인지 1인지 알아보고자 한다.  ?자리에 들어갈 비트​연산자​들은​?​​​​
result = (a ? k) ? 1;
정답 : result = (a >> k) & 1;

(7) a의 k번째(2의 k제곱 ​자리) 비트만 0으로 바꾸고자 한다.  ?자리에 들어갈 비트​연산자​들은​?​​​​
a = a ? (?(1 ? k));
정답 : a = a & (~(1 << k));

(8) a의 k번째(2의 k제곱 ​자리) 비트만 0이면 1로, 1이면 0으로 바꾸고자 한다.  ?자리에 들어갈 비트​연산자​들은​?​​​​
a = a ? (1 ? k);
정답 : a = a ^ (1 << k);

(9) a가 2의 제곱수인지 판별하고자 한다. ?자리에 들어갈 비트​연산자들은​?​​​​​
result = a ? (a - 1);
if( a > 0 && result==0) printf("%d is the power of 2.\n", a);  
정답 : result = a & (a - 1);

(10) a와 b의 같은 자리 비트를 비교한 결과 서로 다른 비트가 1개 이하인지 알아보고자 한다. ?자리에 들어갈 비트​연산자​들은​?​​​​​
bit = a ? b; result = bit ? (bit -1);
if(result==0) printf("%d and %d differ by below 1bit.\n", a, b);  ​
정답 : bit = a ^ b; result = bit & (bit -1);